from fastapi import FastAPI, WebSocket, WebSocketDisconnect
import asyncio
import websockets
import json

# Initialize FastAPI
app = FastAPI()

# List of active WebSocket connections
active_connections = set()

# Global control variables
is_processing = False  # Blocks new requests while a response is being generated
block_time = 0  # Stores the time (in seconds) for which new requests are blocked

# AI WebSocket Server (Main AI Script)
AI_SERVER_URL = "wss://shrokgpt-production.up.railway.app/ws/ai"

# Welcome and busy messages
WELCOME_MESSAGE = "Address me as @ShrokAI and type your message so I can hear you."
BUSY_MESSAGE = "ShrokAI is busy, please wait for the current response to complete."

async def forward_to_ai(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ AI –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    global is_processing, block_time

    print(f"[FORWARD] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ AI: {message}")

    try:
        async with websockets.connect(AI_SERVER_URL) as ai_ws:
            await ai_ws.send(message)

            # –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å
            processing_signal = await ai_ws.recv()
            processing_data = json.loads(processing_signal)

            if processing_data.get("processing"):
                is_processing = True  # AI –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É
                print("[FORWARD] AI –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É")

                # üî• –°–†–ê–ó–£ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –í–°–ï–ú –∫–ª–∏–µ–Ω—Ç–∞–º
                for connection in list(active_connections):
                    try:
                        await connection.send_text(BUSY_MESSAGE)
                    except Exception as e:
                        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–ª—É—à–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: {e}")
                        active_connections.remove(connection)

            # –ñ–¥—ë–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
            response = await ai_ws.recv()

            try:
                data = json.loads(response)
            except json.JSONDecodeError:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {response}")
                return "ShrokAI encountered an issue. Invalid response from AI server."

            if "response" not in data or "audio_length" not in data:
                print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç –æ—Ç AI: {data}")
                return "ShrokAI encountered an issue. Missing response data."

            block_time = data["audio_length"] + 10  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            print(f"[FORWARD] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI: {data['response']} (block_time={block_time}s)")

            return data["response"]

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å AI —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return "ShrokAI encountered an issue. Try again later."

@app.websocket("/ws/proxy")
async def proxy_websocket(websocket: WebSocket):
    global is_processing
    await websocket.accept()
    active_connections.add(websocket)
    
    print(f"[CONNECT] –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω ({len(active_connections)} –≤—Å–µ–≥–æ)")

    # Send welcome message
    await websocket.send_text(WELCOME_MESSAGE)
    
    try:
        while True:
            message = await websocket.receive_text()
            print(f"[MESSAGE] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

            # ‚ö°Ô∏è –ï—Å–ª–∏ AI —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É —Å—Ä–∞–∑—É –∂–µ!
            if is_processing:
                print("[BUSY] AI —É–∂–µ –∑–∞–Ω—è—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –∫–ª–∏–µ–Ω—Ç—É")
                await websocket.send_text(BUSY_MESSAGE)
                continue  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            
            # ‚ö°Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!
            is_processing = True
            print("[PROCESSING] AI –≤–∑—è–ª –∑–∞–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É")

            # Forward message to AI server
            response = await forward_to_ai(message)

            # –†–∞—Å—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for connection in list(active_connections):
                try:
                    await connection.send_text(response)
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
                    active_connections.remove(connection)
                    
            # –°—Ç–∞—Ä—Ç—É–µ–º —Ç–∞–π–º–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            asyncio.create_task(unblock_after_delay())

    except WebSocketDisconnect:
        print("[DISCONNECT] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
        active_connections.remove(websocket)
    except Exception as e:
        print(f"[ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await websocket.close(code=1001)

async def unblock_after_delay():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏."""
    global is_processing
    print(f"[TIMER] –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ {block_time} —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(block_time)
    is_processing = False
    print("[TIMER] AI —Å–Ω–æ–≤–∞ —Å–≤–æ–±–æ–¥–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=9000)
