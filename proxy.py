from fastapi import FastAPI, WebSocket, WebSocketDisconnect
import asyncio
import websockets
import json

app = FastAPI()
active_connections = set()
is_processing = False  # –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
block_time = 0  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

AI_SERVER_URL = "wss://shrokgpt-production.up.railway.app/ws/ai"

WELCOME_MESSAGE = "Address me as @ShrokAI and type your message so I can hear you."
BUSY_MESSAGE = "ShrokAI is busy, please wait for the current response to complete."

async def forward_to_ai(message: str):
    global is_processing, block_time
    try:
        async with websockets.connect(AI_SERVER_URL) as ai_ws:
            await ai_ws.send(message)
            response = await ai_ws.recv()
            
            print(f"üì© Received response from AI: {response}")  # –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
            data = json.loads(response)  # –†–∞–∑–±–∏—Ä–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
            block_time = data.get("audio_length", 0) + 10
            
            ai_response = data.get("response", None)
            if not ai_response:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                print("‚ö†Ô∏è AI response is missing! Sending fallback message.")
                return "ShrokAI encountered an issue. Try again later."

            return ai_response  # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    except Exception as e:
        print(f"üö® Error communicating with AI server: {e}")
        return "ShrokAI encountered an issue. Try again later."

@app.websocket("/ws/proxy")
async def proxy_websocket(websocket: WebSocket):
    global is_processing
    await websocket.accept()
    active_connections.add(websocket)

    await websocket.send_text(WELCOME_MESSAGE)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    
    try:
        while True:
            message = await websocket.receive_text()
            print(f"Received message: {message}")

            if is_processing:
                print("ShrokAI is currently busy. Sending busy message.")
                await websocket.send_text(BUSY_MESSAGE)
                continue

            # ‚úÖ 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º `is_processing = True` –°–†–ê–ó–£
            is_processing = True
            print("Processing started. Blocking new requests.")

            # ‚úÖ 2. –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ –ò–ò –∑–∞–Ω—è—Ç
            for connection in list(active_connections):
                try:
                    await connection.send_text(BUSY_MESSAGE)
                except Exception as e:
                    print(f"Failed to send busy message to a client: {e}")
                    active_connections.remove(connection)

            # ‚úÖ 3. –ü–µ—Ä–µ–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ò–ò
            response = await forward_to_ai(message)

            # ‚úÖ 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for connection in list(active_connections):
                try:
                    await connection.send_text(response)
                except Exception as e:
                    print(f"Failed to send message to client: {e}")
                    active_connections.remove(connection)

            # ‚úÖ 5. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            asyncio.create_task(unblock_after_delay())

    except WebSocketDisconnect:
        print("WebSocket disconnected")
        active_connections.remove(websocket)
    except Exception as e:
        print(f"Unexpected error: {e}")
        await websocket.close(code=1001)

async def unblock_after_delay():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏."""
    global is_processing
    print(f"Blocking requests for {block_time} seconds...")
    await asyncio.sleep(block_time)
    is_processing = False
    print("Unblocking requests.")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=9000)
