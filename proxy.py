from fastapi import FastAPI, WebSocket, WebSocketDisconnect
import asyncio
import websockets
import json

# Initialize FastAPI
app = FastAPI()

# List of active WebSocket connections
active_connections = set()

# –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
message_queue = asyncio.Queue()

# AI Server WebSocket URL
AI_SERVER_URL = "wss://shrokgpt-production.up.railway.app/ws/ai"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞
is_processing = False  # AI –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏?
block_time = 0  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º

# –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
WELCOME_MESSAGE = "Mention @ShrokAI, and I‚Äôll respond‚Ä¶ probably. If I‚Äôm not lost in a mushroom trip."
BUSY_MESSAGE = "Thinking... but the mushrooms have other plans for my brain."
REQUEST_RECEIVED_MESSAGE = "Loud and clear! Now, how about some mushrooms to enhance the conversation?"

async def process_queue():
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    global is_processing

    while True:
        message, websocket = await message_queue.get()

        # ‚úÖ –°—Ç–∞–≤–∏–º AI –≤ –∑–∞–Ω—è—Ç–æ—Å—Ç—å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
        if is_processing:
            print("[BUSY] AI —É–∂–µ –∑–∞–Ω—è—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –∫–ª–∏–µ–Ω—Ç—É")
            try:
                await websocket.send_text(BUSY_MESSAGE)
            except WebSocketDisconnect:
                print("[DISCONNECT] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–ª—É—à–∫–∏")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å

        # AI —Ç–µ–ø–µ—Ä—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        is_processing = True
        print(f"[PROCESSING] AI –ø—Ä–∏–Ω—è–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {message}")

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
        try:
            await websocket.send_text(REQUEST_RECEIVED_MESSAGE)
        except WebSocketDisconnect:
            print("[DISCONNECT] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ 'Request received'")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        response = await forward_to_ai(message)

        # –†–∞—Å—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for connection in list(active_connections):
            try:
                await connection.send_text(response)
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
                active_connections.remove(connection)

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        asyncio.create_task(unblock_after_delay())

async def forward_to_ai(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ AI –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    global is_processing, block_time

    print(f"[FORWARD] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ AI: {message}")

    try:
        async with websockets.connect(AI_SERVER_URL, ping_interval=10, ping_timeout=None) as ai_ws:
            await ai_ws.send(message)

            while True:
                try:
                    response = await ai_ws.recv()  # üî• –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞
                except websockets.ConnectionClosed:
                    print("[ERROR] WebSocket AI –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ!")
                    return "Overdosed on swamp shrooms‚Äîbrain.exe not found."

                try:
                    data = json.loads(response)
                except json.JSONDecodeError:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {response}")
                    return "Overdosed on swamp shrooms‚Äîbrain.exe not found."

                # üî• –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∏–≥–Ω–∞–ª "processing", –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –∂–¥—ë–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                if "processing" in data:
                    print("[INFO] AI –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∂–¥—ë–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...")
                    continue  

                # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –Ω–∞—Å—Ç–æ—è—â–∏–π –æ—Ç–≤–µ—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                if "response" not in data or "audio_length" not in data:
                    print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç –æ—Ç AI: {data}")
                    return "Overdosed on swamp shrooms‚Äîbrain.exe not found."

                block_time = data["audio_length"] + 10  # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Ä–µ–º—è
                print(f"[FORWARD] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI: {data['response']} (block_time={block_time}s)")

                return data["response"]

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å AI —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return "Overdosed on swamp shrooms‚Äîbrain.exe not found."

@app.websocket("/ws/proxy")
async def proxy_websocket(websocket: WebSocket):
    global is_processing
    await websocket.accept()
    active_connections.add(websocket)
    
    print(f"[CONNECT] –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω ({len(active_connections)} –≤—Å–µ–≥–æ)")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await websocket.send_text(WELCOME_MESSAGE)
    
    try:
        while True:
            message = await websocket.receive_text()
            print(f"[MESSAGE] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

            # ‚úÖ –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å AI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            if is_processing:
                print("[BUSY] AI —É–∂–µ –∑–∞–Ω—è—Ç, –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –∫–ª–∏–µ–Ω—Ç—É")
                await websocket.send_text(BUSY_MESSAGE)
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
            await message_queue.put((message, websocket))

    except WebSocketDisconnect:
        print("[DISCONNECT] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
        active_connections.remove(websocket)
    except Exception as e:
        print(f"[ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await websocket.close(code=1001)

async def unblock_after_delay():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏."""
    global is_processing
    print(f"[TIMER] –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ {block_time} —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(block_time)
    is_processing = False
    print("[TIMER] AI —Å–Ω–æ–≤–∞ —Å–≤–æ–±–æ–¥–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–æ–Ω–µ
asyncio.create_task(process_queue())

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=9000)
